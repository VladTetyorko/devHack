diff --git a/src/main/java/com/vladte/devhack/controller/AnswerController.java b/src/main/java/com/vladte/devhack/controller/AnswerController.java
index eaba32d..d32fc4e 100644
--- a/src/main/java/com/vladte/devhack/controller/AnswerController.java
+++ b/src/main/java/com/vladte/devhack/controller/AnswerController.java
@@ -1,12 +1,19 @@
 package com.vladte.devhack.controller;

+import com.vladte.devhack.dto.AnswerDTO;
+import com.vladte.devhack.mapper.AnswerMapper;
 import com.vladte.devhack.model.Answer;
 import com.vladte.devhack.model.InterviewQuestion;
 import com.vladte.devhack.model.User;
 import com.vladte.devhack.service.domain.AnswerService;
 import com.vladte.devhack.service.domain.InterviewQuestionService;
 import com.vladte.devhack.service.domain.UserService;
+import com.vladte.devhack.service.view.AnswerFormService;
+import com.vladte.devhack.service.view.ModelBuilder;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.stereotype.Controller;
@@ -14,22 +21,26 @@ import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.*;

 import java.util.List;
-import java.util.Optional;
 import java.util.UUID;

-/**
- * Controller for handling requests related to answers.
- */
 @Controller
 @RequestMapping("/answers")
 public class AnswerController extends UserEntityController<Answer, UUID, AnswerService> {

     private final InterviewQuestionService questionService;
+    private final AnswerFormService answerFormService;
+    private final AnswerMapper answerMapper;

     @Autowired
-    public AnswerController(AnswerService answerService, UserService userService, InterviewQuestionService questionService) {
+    public AnswerController(AnswerService answerService,
+                            UserService userService,
+                            InterviewQuestionService questionService,
+                            AnswerFormService answerFormService,
+                            AnswerMapper answerMapper) {
         super(answerService, userService);
         this.questionService = questionService;
+        this.answerFormService = answerFormService;
+        this.answerMapper = answerMapper;
     }

     @Override
@@ -62,14 +73,11 @@ public class AnswerController extends UserEntityController<Answer, UUID, AnswerS
         return "Answer";
     }

-    /**
-     * Display a list of answers for the current user.
-     *
-     * @param model the model to add attributes to
-     * @return the name of the view to render
-     */
-    @Override
-    public String list(Model model) {
+    @GetMapping
+    public String list(
+            @RequestParam(defaultValue = "0") int page,
+            @RequestParam(defaultValue = "10") int size,
+            Model model) {
         // Get the current authenticated user
         Authentication authentication =
                 SecurityContextHolder.getContext().getAuthentication();
@@ -79,37 +87,30 @@ public class AnswerController extends UserEntityController<Answer, UUID, AnswerS
         User currentUser = userService.findByEmail(currentUserEmail)
                 .orElseThrow(() -> new IllegalStateException("Current user not found"));

-        // Get answers for the current user
-        List<Answer> answers = service.findAnswersByUser(currentUser);
-        model.addAttribute("answers", answers);
-        setPageTitle(model, "My Answers");
+        // Create pageable object
+        Pageable pageable = PageRequest.of(page, size);
+
+        // Get answers for the current user with pagination
+        Page<Answer> answerPage = service.findAnswersByUser(currentUser, pageable);
+
+        // Convert to DTO page
+        Page<AnswerDTO> answerDTOPage = answerPage.map(answerMapper::toDTO);
+
+        // Using the new ModelBuilder to build the model with pagination data
+        ModelBuilder.of(model)
+                .addPagination(answerDTOPage, page, size, "answers")
+                .setPageTitle("My Answers")
+                .build();
+
         return "answers/list";
     }


-    /**
-     * Display the form for creating a new answer.
-     *
-     * @param questionId the ID of the question being answered
-     * @param model      the model to add attributes to
-     * @return the name of the view to render
-     */
     @GetMapping("/new")
     public String newAnswerForm(@RequestParam(required = false) UUID questionId, Model model) {
-        Answer answer = new Answer();
-
-        if (questionId != null) {
-            Optional<InterviewQuestion> questionOpt = questionService.findById(questionId);
-            questionOpt.ifPresent(question -> {
-                answer.setQuestion(question);
-                model.addAttribute("question", question);
-            });
-        }
-
-        model.addAttribute("answer", answer);
-        model.addAttribute("users", userService.findAll());
-        model.addAttribute("questions", questionService.findAll());
-        setPageTitle(model, "Create New Answer");
+        // Delegate to the form service
+        answerFormService.prepareNewAnswerForm(questionId, model);
+        answerFormService.setNewAnswerPageTitle(model);
         return "answers/form";
     }

@@ -122,11 +123,19 @@ public class AnswerController extends UserEntityController<Answer, UUID, AnswerS
      */
     @GetMapping("/{id}")
     public String view(@PathVariable UUID id, Model model) {
-        Answer answer = getEntityOrThrow(service.findById(id), "Answer not found");
-        model.addAttribute("answer", answer);
-        model.addAttribute("users", userService.findAll());
-        model.addAttribute("questions", questionService.findAll());
-        setPageTitle(model, "Edit Answer");
+        // Delegate to the form service
+        AnswerDTO answerDTO = answerFormService.prepareEditAnswerForm(id, model);
+        if (answerDTO == null) {
+            throw new IllegalArgumentException("Answer not found");
+        }
+
+        // Add the question to the model for the view
+        if (answerDTO.getQuestionId() != null) {
+            questionService.findById(answerDTO.getQuestionId())
+                .ifPresent(question -> model.addAttribute("question", question));
+        }
+
+        answerFormService.setEditAnswerPageTitle(model);
         return "answers/view";
     }

@@ -140,33 +149,28 @@ public class AnswerController extends UserEntityController<Answer, UUID, AnswerS
      */
     @GetMapping("/{id}/edit")
     public String editAnswerForm(@PathVariable UUID id, Model model) {
-        Answer answer = getEntityOrThrow(service.findById(id), "Answer not found");
-        model.addAttribute("answer", answer);
-        model.addAttribute("users", userService.findAll());
-        model.addAttribute("questions", questionService.findAll());
-        setPageTitle(model, "Edit Answer");
+        // Delegate to the form service
+        if (answerFormService.prepareEditAnswerForm(id, model) == null) {
+            throw new IllegalArgumentException("Answer not found");
+        }
+        answerFormService.setEditAnswerPageTitle(model);
         return "answers/form";
     }

     /**
      * Process the form submission for creating or updating an answer.
      *
-     * @param answer     the answer data from the form
+     * @param answerDTO  the answer data from the form
      * @param userId     the ID of the user who created the answer
      * @param questionId the ID of the question being answered
      * @return a redirect to the answer list
      */
     @PostMapping
     public String saveAnswer(
-            @ModelAttribute Answer answer,
+            @ModelAttribute AnswerDTO answerDTO,
             @RequestParam UUID userId,
             @RequestParam UUID questionId) {
-        User user = getEntityOrThrow(userService.findById(userId), "User not found");
-        InterviewQuestion question = getEntityOrThrow(questionService.findById(questionId), "Question not found");
-        answer.setUser(user);
-        answer.setQuestion(question);
-
-        service.save(answer);
+        answerFormService.saveAnswer(answerDTO, userId, questionId);
         return "redirect:/answers";
     }

@@ -193,9 +197,19 @@ public class AnswerController extends UserEntityController<Answer, UUID, AnswerS
     public String getAnswersByUser(@PathVariable UUID userId, Model model) {
         User user = getEntityOrThrow(userService.findById(userId), "User not found");
         List<Answer> answers = service.findAnswersByUser(user);
-        model.addAttribute("answers", answers);
-        model.addAttribute("user", user);
-        setPageTitle(model, "Answers by " + user.getName());
+
+        // Convert to DTO list
+        List<AnswerDTO> answerDTOs = answers.stream()
+                .map(answerMapper::toDTO)
+                .collect(java.util.stream.Collectors.toList());
+
+        // Using ModelBuilder to build the model
+        ModelBuilder.of(model)
+                .addAttribute("answers", answerDTOs)
+                .addAttribute("user", user)
+                .setPageTitle("Answers by " + user.getName())
+                .build();
+
         return "answers/list";
     }

@@ -210,9 +224,19 @@ public class AnswerController extends UserEntityController<Answer, UUID, AnswerS
     public String getAnswersByQuestion(@PathVariable UUID questionId, Model model) {
         InterviewQuestion question = getEntityOrThrow(questionService.findById(questionId), "Question not found");
         List<Answer> answers = service.findAnswersByQuestion(question);
-        model.addAttribute("answers", answers);
-        model.addAttribute("question", question);
-        setPageTitle(model, "Answers for Question: " + question.getQuestionText());
+
+        // Convert to DTO list
+        List<AnswerDTO> answerDTOs = answers.stream()
+                .map(answerMapper::toDTO)
+                .collect(java.util.stream.Collectors.toList());
+
+        // Using the new ModelBuilder to build the model
+        ModelBuilder.of(model)
+                .addAttribute("answers", answerDTOs)
+                .addAttribute("question", question)
+                .setPageTitle("Answers for Question: " + question.getQuestionText())
+                .build();
+
         return "answers/list";
     }

@@ -225,11 +249,21 @@ public class AnswerController extends UserEntityController<Answer, UUID, AnswerS
      */
     @GetMapping("/{id}/check")
     public String checkAnswerWithAi(@PathVariable UUID id, Model model) {
-        Answer answer = service.checkAnswerWithAi(id);
-        model.addAttribute("answer", answer);
-        model.addAttribute("message", "Answer checked by AI. Score: " + answer.getAiScore());
-        model.addAttribute("aiFeedback", answer.getAiFeedback());
-        setPageTitle(model, "Answer Details");
+        // Delegate to the form service
+        com.vladte.devhack.dto.AnswerDTO answerDTO = answerFormService.checkAnswerWithAi(id);
+        if (answerDTO == null) {
+            throw new IllegalArgumentException("Answer not found");
+        }
+
+        // Add additional information to the model
+        ModelBuilder.of(model)
+                .addAttribute("message", "Answer checked by AI. Score: " + answerDTO.getAiScore())
+                .addAttribute("aiFeedback", answerDTO.getAiFeedback())
+                .build();
+
+        // Set the page title
+        answerFormService.setEditAnswerPageTitle(model);
+
         return "answers/view";
     }
 }